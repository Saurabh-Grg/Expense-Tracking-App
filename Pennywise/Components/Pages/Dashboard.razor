@page "/dashboard"
@using Pennywise.Components.Layout
@layout LayoutWithNavmenu
@inject NavigationManager Navigator
@using System.Text.Json
@using Pennywise.Components.Models
@using Newtonsoft.Json
@using System.IO
@using System.Linq
@using System.Threading.Tasks
@using System.Diagnostics

<div class="dashboard-container">
    <div class="header-section">
        <h1>Dashboard</h1>
        <p>Your financial overview at a glance</p>
    </div>
    <div class="totalBalance-section">
        <p class="circle-header">Your Balance</p>
        <p class="circle-value">Rs @totalBalance</p>
    </div>

    <h2>Financial Overview</h2>
    <div class="overview-section">
        <div class="circle-overview inflow">
            <p class="circle-header">Inflows</p>
            <p class="circle-value">Rs @totalInflows</p>
        </div>
        <div class="circle-overview outflow">
            <p class="circle-header">Outflows</p>
            <p class="circle-value">Rs @totalOutflows</p>
        </div>
        <div class="circle-overview debts">
            <p class="circle-header">Debts</p>
            <p class="circle-value">Rs @totalDebts</p>
        </div>
    </div>

    <h2>Key Statistics</h2>
    <div class="statistics-section">
            
            <div class="stat-box">
                <h3>Highest Inflow</h3>
                <p>Rs @highestInflow</p>
            </div>
            <div class="stat-box">
                <h3>Lowest Inflow</h3>
                <p>Rs @lowestInflow</p>
            </div>
            <div class="stat-box">
                <h3>Highest Outflow</h3>
                <p>Rs @highestOutflow</p>
            </div>
            <div class="stat-box">
                <h3>Lowest Outflow</h3>
                <p>Rs @lowestOutflow</p>
            </div>
            <div class="stat-box">
                <h3>Highest Debt</h3>
                <p>Rs @highestDebt</p>
            </div>
            <div class="stat-box">
                <h3>Lowest Debt</h3>
                <p>Rs @lowestDebt</p>
            </div>
        <div class="stat-box">
            <h3>Cleared Debts</h3>
            <p>Rs @clearedDebts</p>
        </div>
        <div class="stat-box">
            <h3>Remaining Debts</h3>
            <p>Rs @remainingDebts</p>
        </div>
    </div>


    <div class="recent-section">
        <div class="recent-transactions">
            <h2>Recent Transactions</h2>
            <div class="scrollable">
                @if (transactions.Any())
                {
                    @foreach (var transaction in transactions.OrderByDescending(t => t.Date))
                    {
                        <div class="transaction-item">
                            <div class="transaction-info">
                                <p><strong>@transaction.Title</strong> (@transaction.Type)</p>
                                <p>@transaction.Date.ToShortDateString()</p>
                            </div>
                            <div class="transaction-amount">
                                <p>- Rs @transaction.Amount</p>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>No transactions available.</p>
                }
            </div>
        </div>
        <div class="recent-debts">
            <h2>Pending Debts</h2>
            <div class="scrollable">
                @if (debts.Any())
                {
                    @foreach (var debt in debts.Where(d => d.Status == "Pending").OrderByDescending(d => d.Date))
                    {
                        <div class="debt-item">
                            <div class="debt-info">
                                <p><strong>@debt.Title</strong> (@debt.Source)</p>
                                <p>@debt.Date.ToShortDateString()</p>
                            </div>
                            <div class="debt-amount">
                                <p>- Rs @debt.Amount</p>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>No pending debts.</p>
                }
            </div>
        </div>
    </div>
</div>
@code {
    private List<Transaction> transactions = new List<Transaction>();
    private List<Debt> debts = new List<Debt>();

    private decimal totalInflows => transactions.Where(t => t.Type == "Income").Sum(t => t.Amount);
    private decimal totalOutflows => transactions.Where(t => t.Type == "Expense").Sum(t => t.Amount);

    private decimal totalDebts => debts.Sum(d => d.Amount);
    private decimal clearedDebts => debts.Where(d => d.Status == "Cleared").Sum(d => d.Amount);
    private decimal remainingDebts => totalDebts - clearedDebts;

    private decimal totalBalance => totalInflows + remainingDebts - totalOutflows;

    private decimal highestInflow => transactions.Where(t => t.Type == "Income").Any() ? transactions.Where(t => t.Type == "Income").Max(t => t.Amount) : 0;

    private decimal lowestInflow => transactions.Where(t => t.Type == "Income").Any() ? transactions.Where(t => t.Type == "Income").Min(t => t.Amount) : 0;

    private decimal highestOutflow => transactions.Where(t => t.Type == "Expense").Any() ? transactions.Where(t => t.Type == "Expense").Max(t => t.Amount) : 0;

    private decimal lowestOutflow => transactions.Where(t => t.Type == "Expense").Any() ? transactions.Where(t => t.Type == "Expense").Min(t => t.Amount) : 0;

    private decimal highestDebt => debts.Any() ? debts.Max(d => d.Amount) : 0;

    private decimal lowestDebt => debts.Any() ? debts.Min(d => d.Amount) : 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load Transactions
            var transactionFilePath = Path.Combine(FileSystem.Current.AppDataDirectory, "TransactionsData", "transactions.json");
            if (File.Exists(transactionFilePath))
            {
                var transactionJson = await File.ReadAllTextAsync(transactionFilePath);
                transactions = string.IsNullOrWhiteSpace(transactionJson)
                    ? new List<Transaction>()
                    : JsonConvert.DeserializeObject<List<Transaction>>(transactionJson) ?? new List<Transaction>();

                // Debugging - Print Transactions
                Debug.WriteLine("Transactions:");
                foreach (var transaction in transactions)
                {
                    Debug.WriteLine($"Transaction - Title: {transaction.Title}, Type: {transaction.Type}, Amount: {transaction.Amount}, Date: {transaction.Date}");
                }
            }

            // Load Debts
            var baseDirectory = Path.Combine(FileSystem.Current.AppDataDirectory, "DebtData");
            var filePath = Path.Combine(baseDirectory, "debts.json");

            var json = await File.ReadAllTextAsync(filePath);
            debts = JsonConvert.DeserializeObject<List<Debt>>(json) ?? new List<Debt>();
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error loading data: {ex.Message}");
        }
    }
}
