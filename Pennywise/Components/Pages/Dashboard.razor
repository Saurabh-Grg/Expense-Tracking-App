@page "/dashboard"
@using Pennywise.Components.Layout
@layout LayoutWithNavmenu
@inject NavigationManager Navigator
@using System.Text.Json
@using Pennywise.Components.Models
@using Newtonsoft.Json
@using System.IO
@using System.Linq
@using System.Threading.Tasks
@using System.Diagnostics

<div class="main-container">
    <div class="container">
        <div class="row-0">Dashboard</div>
        <div class="row-1">
            <div class="row1-item1">
                <p class="header">Total Inflows</p>
                <p class="body">Rs @totalInflows</p>
            </div>
            <div class="row1-item2">
                <p class="header">Total Outflows</p>
                <p class="body">Rs @totalOutflows</p>
            </div>
        </div>
        <div class="row-2">
            <div class="row2-item1">
                <p class="header">Total Debts</p>
                <p class="body">Rs @totalDebts</p>
            </div>
            <div class="row2-item2">
                <p class="header">Cleared Debts</p>
                <p class="body">Rs @clearedDebts</p>
            </div>
            <div class="row2-item3">
                <p class="header">Remaining Debts</p>
                <p class="body">Rs @remainingDebts</p>
            </div>
        </div>
        <div class="row-3">
            <div class="row3-item1">
                <p class="header">Highest Inflow</p>
                <p class="body">Rs @highestInflow</p>
            </div>
            <div class="row3-item2">
                <p class="header">Lowest Inflow</p>
                <p class="body">Rs @lowestInflow</p>
            </div>
            <div class="row3-item3">
                <p class="header">Highest Outflow</p>
                <p class="body">Rs @highestOutflow</p>
            </div>
            <div class="row3-item4">
                <p class="header">Lowest Outflow</p>
                <p class="body">Rs @lowestOutflow</p>
            </div>
            <div class="row3-item5">
                <p class="header">Highest Debt</p>
                <p class="body">Rs @highestDebt</p>
            </div>
            <div class="row3-item6">
                <p class="header">Lowest Debt</p>
                <p class="body">Rs @lowestDebt</p>
            </div>
        </div>
        <div class="row-4">
            <div class="row4-item1">
                <p class="row4-header">Pending Debts</p>
                <div class="recent-debts">
                    @if (debts.Any())
                    {
                        @foreach (var debt in debts.Where(d => d.Status == "Pending").OrderByDescending(d => d.Date).Take(3))
                        {
                            <div class="debt-item">
                                <div>
                                    <p><strong>@debt.Title</strong> (@debt.Source)</p>
                                    <p>@debt.Date.ToShortDateString()</p>
                                </div>
                                <div>
                                    <p class="dAmount">- Rs @debt.Amount</p>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No pending debts.</p>
                    }
                </div>
            </div>
            <div class="row4-item2">
                <p class="row4-header">Recent Transactions</p>
                <div class="recent-transactions">
                    @if (transactions.Any())
                    {
                        @foreach (var transaction in transactions.OrderByDescending(t => t.Date).Take(4))
                        {
                            <div class="transaction-item">
                                <div>
                                    <p><strong>@transaction.Title</strong> (@transaction.Type)</p>
                                    <p>@transaction.Date.ToShortDateString()</p>
                                </div>
                                <div>
                                    <p class="dAmount">- Rs @transaction.Amount</p>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No transactions available.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private List<Transaction> transactions = new List<Transaction>();
    private List<Debt> debts = new List<Debt>();

    private decimal totalInflows => transactions.Where(t => t.Type == "Income").Sum(t => t.Amount);
    private decimal totalOutflows => transactions.Where(t => t.Type == "Expense").Sum(t => t.Amount);

    private decimal totalDebts => debts.Sum(d => d.Amount);
    private decimal clearedDebts => debts.Where(d => d.Status == "Cleared").Sum(d => d.Amount);
    private decimal remainingDebts => totalDebts - clearedDebts;

    private decimal highestInflow => transactions.Where(t => t.Type == "Income").Any() ? transactions.Where(t => t.Type == "Income").Max(t => t.Amount) : 0;

    private decimal lowestInflow => transactions.Where(t => t.Type == "Income").Any() ? transactions.Where(t => t.Type == "Income").Min(t => t.Amount) : 0;

    private decimal highestOutflow => transactions.Where(t => t.Type == "Expense").Any() ? transactions.Where(t => t.Type == "Expense").Max(t => t.Amount) : 0;

    private decimal lowestOutflow => transactions.Where(t => t.Type == "Expense").Any() ? transactions.Where(t => t.Type == "Expense").Min(t => t.Amount) : 0;

    private decimal highestDebt => debts.Any() ? debts.Max(d => d.Amount) : 0;

    private decimal lowestDebt => debts.Any() ? debts.Min(d => d.Amount) : 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load Transactions
            var transactionFilePath = Path.Combine(FileSystem.Current.AppDataDirectory, "TransactionsData", "transactions.json");
            if (File.Exists(transactionFilePath))
            {
                var transactionJson = await File.ReadAllTextAsync(transactionFilePath);
                transactions = string.IsNullOrWhiteSpace(transactionJson)
                    ? new List<Transaction>()
                    : JsonConvert.DeserializeObject<List<Transaction>>(transactionJson) ?? new List<Transaction>();

                // Debugging - Print Transactions
                Debug.WriteLine("Transactions:");
                foreach (var transaction in transactions)
                {
                    Debug.WriteLine($"Transaction - Title: {transaction.Title}, Type: {transaction.Type}, Amount: {transaction.Amount}, Date: {transaction.Date}");
                }
            }

            // Load Debts
            var debtFilePath = Path.Combine(FileSystem.Current.AppDataDirectory, "DebtData", "debts.json");
            if (File.Exists(debtFilePath))
            {
                var debtJson = await File.ReadAllTextAsync(debtFilePath);
                debts = string.IsNullOrWhiteSpace(debtJson)
                    ? new List<Debt>()
                    : JsonConvert.DeserializeObject<List<Debt>>(debtJson) ?? new List<Debt>();

                // Debugging - Print Debts
                Debug.WriteLine("Debts:");
                foreach (var debt in debts)
                {
                    Debug.WriteLine($"Debt - Source: {debt.Source}, Amount: {debt.Amount}, Status: {debt.Status}, Due Date: {debt.DueDate}");
                }
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error loading data: {ex.Message}");
        }
    }
}
