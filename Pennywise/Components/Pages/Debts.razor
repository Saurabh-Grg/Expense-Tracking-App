@page "/debts"
@using Pennywise.Components.Layout
@layout LayoutWithNavmenu
@using System.Text.Json
@using Pennywise.Components.Models
@using Pennywise.Components.Helpers
@inject NavigationManager Navigator
@using System.Diagnostics
@using Newtonsoft.Json

<body>
    <div class="heading">
        <p>Debt Management</p>
        <button class="add-debt-btn" @onclick="NavigateToAddDebtForm"><i class="bi bi-plus"></i>Add Debt</button>
    </div>
    @if (!string.IsNullOrEmpty(alertMessage))
    {
        <div class="alert alert-warning" role="alert">
            @alertMessage
        </div>
    }

    <!-- Summary Section -->
    <div class="summary">
        <div class="card">
            <h2>Rs @totalDebts</h2>
            <p>Total Debts</p>
        </div>
        <div class="card">
            <h2>Rs @clearedDebts</h2>
            <p>Cleared Debts</p>
        </div>
        <div class="card">
            <h2>Rs @remainingDebts</h2>
            <p>Pending Debts</p>
        </div>
    </div>

    <!-- Debt Table Section -->
    <h2>Your Debts</h2>
    <p class="summary-description">Here is the list of all your debts. You can track, manage, and clear them as needed.</p>
    <div class="table-container">
        <table class="table">
            <thead>
                <tr>
                    <th>Source</th>
                    <th>Amount(Rs)</th>
                    <th>Due Date</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (debts.Count > 0)
                {
                    @foreach (var debt in debts)
                    {
                        <tr>
                            <td>@debt.Source</td>
                            <td>@debt.Amount</td>
                            <td>@debt.DueDate.ToShortDateString()</td>
                            <td>
                                @if (debt.Status == "Pending")
                                {
                                    <span style="color: #dc3545;">Pending</span>
                                }
                                else
                                {
                                    <span style="color: #28a745;">Cleared</span>
                                }
                            </td>
                            <td>
                                @if (debt.Status == "Pending")
                                {
                                    <button class="action-btn" @onclick="() => ClearDebtAsync(debt)">Clear</button>
                                }
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr class="no-data">
                        <td colspan="5">No debts available. Please add new debts to keep track of them.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</body>

@code {
    private string alertMessage = string.Empty;

    private List<Transaction> transactions = new List<Transaction>();
    private List<Debt> debts = new List<Debt>();

    private decimal totalInflows => transactions.Where(t => t.Type == "Income").Sum(t => t.Amount);
    private decimal totalOutflows => transactions.Where(t => t.Type == "Expense").Sum(t => t.Amount);

    private decimal totalDebts => debts.Sum(d => d.Amount);
    private decimal clearedDebts => debts.Where(d => d.Status == "Cleared").Sum(d => d.Amount);
    private decimal remainingDebts => totalDebts - clearedDebts;

    private decimal totalBalance => totalInflows + remainingDebts - totalOutflows;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load Transactions
            var transactionFilePath = Path.Combine(FileSystem.Current.AppDataDirectory, "TransactionsData", "transactions.json");
            if (File.Exists(transactionFilePath))
            {
                var transactionJson = await File.ReadAllTextAsync(transactionFilePath);
                transactions = string.IsNullOrWhiteSpace(transactionJson)
                    ? new List<Transaction>()
                    : JsonConvert.DeserializeObject<List<Transaction>>(transactionJson) ?? new List<Transaction>();

                // Debugging - Print Transactions
                Debug.WriteLine("Transactions:");
                foreach (var transaction in transactions)
                {
                    Debug.WriteLine($"Transaction - Title: {transaction.Title}, Type: {transaction.Type}, Amount: {transaction.Amount}, Date: {transaction.Date}");
                }
            }

            // Load Debts
            var baseDirectory = Path.Combine(FileSystem.Current.AppDataDirectory, "DebtData");
            var filePath = Path.Combine(baseDirectory, "debts.json");

            var json = await File.ReadAllTextAsync(filePath);
            debts = JsonConvert.DeserializeObject<List<Debt>>(json) ?? new List<Debt>();
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private void NavigateToAddDebtForm()
    {
        Navigator.NavigateTo("/add-debt");
    }

    private async Task ClearDebtAsync(Debt debt)
    {
        if (debt == null) return;

        Debug.WriteLine(totalBalance);

        if (totalBalance >= debt.Amount)
        {
            debt.Status = "Cleared";  // Update the debt status to "Cleared"
            await SaveDebtsToFileAsync();
            StateHasChanged();

            alertMessage = "Debt cleared successfully.";
        }
        else
        {
            alertMessage = "You don't have enough balance to clear the debt.";
        }

        // Clear the alert message after a delay
        await Task.Delay(3000); // Adjust the delay time as needed
        alertMessage = string.Empty;
        StateHasChanged();
    }


    private async Task SaveDebtsToFileAsync()
    {
        try
        {
            var baseDirectory = Path.Combine(FileSystem.Current.AppDataDirectory, "DebtData");
            var filePath = Path.Combine(baseDirectory, "debts.json");

            var updatedJson = JsonConvert.SerializeObject(debts, Formatting.Indented);
            await File.WriteAllTextAsync(filePath, updatedJson);

            Debug.WriteLine($"Debt file successfully updated at {filePath}. Content: {updatedJson}");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error saving debts: {ex.Message}");
        }
    }
}