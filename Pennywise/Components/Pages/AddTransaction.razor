@page "/add-transaction"
@using Pennywise.Components.Layout
@using Newtonsoft.Json
@layout LayoutWithNavmenu
@using Pennywise.Components.Models
@using Pennywise.Components.Helpers
@inject NavigationManager Navigator
@using System.Diagnostics
@using System.IO

<body>
    <h3>Add New Transaction</h3>

    @if (!string.IsNullOrEmpty(alertMessage))
    {
        <div class="alert alert-warning" role="alert">
            @alertMessage
        </div>
    }

    <EditForm Model="@newTransaction" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Title -->
        <div class="form-group">
            <label for="title">Title</label>
            <InputText id="title" class="form-control" @bind-Value="newTransaction.Title" required />
        </div>

        <!-- Amount -->
        <div class="form-group">
            <label for="amount">Amount</label>
            <InputNumber id="amount" class="form-control" @bind-Value="newTransaction.Amount" required />
        </div>

        <!-- Type -->
        <div class="form-group">
            <label for="type">Type</label>
            <InputSelect id="type" class="form-control" @bind-Value="newTransaction.Type" required>
                <option value="" disabled selected>Select transaction type</option>
                <option value="Income">Income</option>
                <option value="Expense">Expense</option>
            </InputSelect>
        </div>

        <!-- Date -->
        <div class="form-group">
            <label for="date">Date</label>
            <InputDate id="date" class="form-control" @bind-Value="newTransaction.Date" required />
        </div>

        <!-- Category -->
        <div class="form-group">
            <label for="category">Category</label>
            <InputText id="category" class="form-control" @bind-Value="newTransaction.Category" required />
        </div>

        <!-- Tags -->
        <div class="form-group">
            <label for="tags">Tags</label>

            <!-- Button to toggle between default and custom tags -->
            <button type="button" class="customTagButton" @onclick="ToggleTagMode">
                @if (isCustomTagMode)
                {
                    <span>Use Default Tags</span>
                }
                else
                {
                    <span>Use Custom Tag</span>
                }
            </button>

            @if (isCustomTagMode)
            {
                <!-- Custom tag input field -->
                <InputText id="customTag" class="form-control" @bind-Value="newTransaction.Tags" placeholder="Enter custom tag" />
            }
            else
            {
                <!-- Default tags dropdown -->
                <InputSelect id="tags" class="form-control" @bind-Value="newTransaction.Tags" required>
                    <option value="" disabled selected>Select tag</option>
                    <option value="Yearly">Yearly</option>
                    <option value="Monthly">Monthly</option>
                    <option value="Food">Food</option>
                    <option value="Drinks">Drinks</option>
                    <option value="Clothes">Clothes</option>
                    <option value="Gadgets">Gadgets</option>
                    <option value="Miscellaneous">Miscellaneous</option>
                    <option value="Fuel">Fuel</option>
                    <option value="Rent">Rent</option>
                    <option value="EMI">EMI</option>
                    <option value="Party">Party</option>
                    <option value="Utilities">Utilities</option>
                    <option value="Groceries">Groceries</option>
                    <option value="Health">Health</option>
                    <option value="Travel">Travel</option>
                    <option value="Entertainment">Entertainment</option>
                    <option value="Savings">Savings</option>
                    <option value="Gifts">Gifts</option>
                    <option value="Insurance">Insurance</option>
                    <option value="Taxes">Taxes</option>
                    <option value="Education">Education</option>
                    <option value="Subscription">Subscription</option>
                    <option value="Maintenance">Maintenance</option>
                    <option value="Investment">Investment</option>
                    <option value="Charity">Charity</option>
                    <option value="Salary">Salary</option>
                    <option value="Bonuses">Bonuses</option>
                    <option value="Reimbursements">Reimbursements</option>
                    <option value="Loans">Loans</option>
                    <option value="Debt Repayments">Debt Repayments</option>
                </InputSelect>
            }
        </div>

        <!-- Notes -->
        <div class="form-group">
            <label for="notes">Notes</label>
            <InputText id="notes" class="form-control" @bind-Value="newTransaction.Notes" />
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-success">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </EditForm>
</body>

@code {
    private Transaction newTransaction = new Transaction { Date = DateTime.Now };
    private string alertMessage = string.Empty;
    private bool isCustomTagMode = false; 

    private async Task HandleValidSubmit()
    {
        try
        {
            var user = UserStorage.LoadUser();
            if (user == null)
            {
                Debug.WriteLine("No user found. Operation aborted.");
                return;
            }

            newTransaction.UserId = user.UserId.ToString();
            newTransaction.Id = Guid.NewGuid().ToString();

            var baseDirectory = Path.Combine(FileSystem.Current.AppDataDirectory, "TransactionsData");
            if (!Directory.Exists(baseDirectory))
            {
                Directory.CreateDirectory(baseDirectory);
                Debug.WriteLine($"Created directory: {baseDirectory}");
            }

            var filePath = Path.Combine(baseDirectory, "transactions.json");
            Debug.WriteLine($"Transaction file path: {filePath}");

            List<Transaction> transactions;

            if (File.Exists(filePath))
            {
                Debug.WriteLine("File exists. Reading content...");
                var json = await File.ReadAllTextAsync(filePath);
                transactions = string.IsNullOrWhiteSpace(json)
                    ? new List<Transaction>()
                    : JsonConvert.DeserializeObject<List<Transaction>>(json) ?? new List<Transaction>();
                Debug.WriteLine($"Loaded transactions: {JsonConvert.SerializeObject(transactions)}");
            }
            else
            {
                Debug.WriteLine("File does not exist. Initializing new transaction list.");
                transactions = new List<Transaction>();
            }

            // Calculate total balance (Income - Expense)
            var totalIncome = transactions.Where(t => t.Type == "Income").Sum(t => t.Amount);
            var totalExpenses = transactions.Where(t => t.Type == "Expense").Sum(t => t.Amount);
            var totalBalance = totalIncome - totalExpenses;

            Debug.WriteLine($"Current total balance: {totalBalance}");

            // Sufficient balance check for outflows
            if (newTransaction.Type == "Expense" && newTransaction.Amount > totalBalance)
            {
                alertMessage = "Insufficient balance for this expense.";
                Debug.WriteLine(alertMessage);
                // Optionally, display a user-friendly message in the UI
                return;
            }

            transactions.Add(newTransaction);
            var updatedJson = JsonConvert.SerializeObject(transactions, Formatting.Indented);

            await File.WriteAllTextAsync(filePath, updatedJson);
            Debug.WriteLine($"File successfully updated at {filePath}. Content: {updatedJson}");

            Navigator.NavigateTo("/transactions");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error: {ex.Message}");
            Debug.WriteLine($"Stack Trace: {ex.StackTrace}");
        }
    }

    private void Cancel()
    {
        Navigator.NavigateTo("/transactions");
    }
    // Method to toggle between custom and default tags
    private void ToggleTagMode()
    {
        isCustomTagMode = !isCustomTagMode;
    }
}
